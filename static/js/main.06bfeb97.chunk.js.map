{"version":3,"sources":["Tones.tsx","KeyboardMusic.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tones","freqs","map","freq","key","detune","Tone","waveform","useEffect","osc","audioCtx","createOscillator","connect","masterGainNode","type","frequency","value","start","stop","AudioContext","createGain","destination","KeyboardMusic","useState","Set","keys","setKeys","addKey","has","add","removeKey","nextKeys","delete","window","addEventListener","removeEventListener","compact","getFreqFromKey","mapKeyToFreq","multiplier","fq","distanceFromRoot","piano","b3","c4","d4","e4","f4","g4","as4","a4","b4","c5","d5","e5","a","s","d","f","g","h","j","k","l","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAeeA,EAbD,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MACf,OACE,oCACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,yBAAKC,IAAKD,GACR,kBAAC,EAAD,CAAMA,KAAMA,EAAME,QAAS,KAC3B,kBAAC,EAAD,CAAMF,KAAMA,EAAME,OAAQ,WAS9BC,EAAO,SAAC,GAQP,IAPLH,EAOI,EAPJA,KAOI,IANJI,gBAMI,MANO,OAMP,MALJF,cAKI,MALK,EAKL,EAYJ,OAXAG,qBAAU,WACR,IAAIC,EAAMC,EAASC,mBAMnB,OALAF,EAAIG,QAAQC,GACZJ,EAAIK,KAAOP,EACXE,EAAIM,UAAUC,MAAQb,EACtBM,EAAIJ,OAAOW,MAAQX,EACnBI,EAAIQ,QACG,WACLR,EAAIS,WAGD,oCAAGf,IAKNO,EAAW,IAAIS,aAEfN,EAAiBH,EAASU,aAChCP,EAAeD,QAAQF,EAASW,a,WCRjBC,EAjCO,WAAO,IAAD,EACFC,mBAAsB,IAAIC,KADxB,mBACnBC,EADmB,KACbC,EADa,KAuB1B,OArBAlB,qBAAU,WACR,IAAMmB,EAAS,SAAC,GAA4B,IAA1BvB,EAAyB,EAAzBA,IACXqB,EAAKG,IAAIxB,IACZsB,GAAQ,SAAAD,GAAI,OAAI,IAAID,IAAIC,GAAMI,IAAIzB,OAGhC0B,EAAY,SAAC,GAA4B,IAA1B1B,EAAyB,EAAzBA,IACnBsB,GAAQ,SAAAD,GACN,IAAMM,EAAW,IAAIP,IAAIC,GAEzB,OADAM,EAASC,OAAO5B,GACT2B,MAKX,OAFAE,OAAOC,iBAAiB,UAAWP,GACnCM,OAAOC,iBAAiB,QAASJ,GAC1B,WACLG,OAAOE,oBAAoB,UAAWR,GACtCM,OAAOE,oBAAoB,QAASL,OAKtC,oCACE,6BAAML,GACN,6BACE,kBAAC,EAAD,CAAOxB,MAAOmC,kBAAQ,YAAIX,GAAMvB,IAAImC,SAQtCA,EAAiB,SAACjC,GACtB,OAAOkC,EAAalC,IAAQ,MAGxBmC,EAAU,SAAG,EAAM,EAAI,IAGvBC,EAAK,SAACC,GAOV,OATW,IASA,SAAGF,EAAcE,IAGxBC,EAAQ,CACZC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,IAAKT,EAAG,GACRU,GAAIV,EAAG,GACPW,GAAI,SACJC,GAAI,SACJC,GAAI,SACJC,GAAI,UAGAhB,EAA0C,CAC9CiB,EAAGb,EAAME,GACTY,EAAGd,EAAMG,GACTY,EAAGf,EAAMI,GACTY,EAAGhB,EAAMK,GACTY,EAAGjB,EAAMM,GACTY,EAAGlB,EAAMQ,GACTW,EAAGnB,EAAMS,GACTW,EAAGpB,EAAMU,GACTW,EAAGrB,EAAMW,GACT,IAAKX,EAAMY,ICtEEU,EARH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.06bfeb97.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nconst Tones = ({ freqs }: { freqs: number[] }) => {\n  return (\n    <>\n      {freqs.map(freq => (\n        <div key={freq}>\n          <Tone freq={freq} detune={-10} />\n          <Tone freq={freq} detune={10} />\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default Tones;\n\nconst Tone = ({\n  freq,\n  waveform = \"sine\",\n  detune = 0\n}: {\n  freq: number;\n  waveform?: Waveform;\n  detune?: number;\n}) => {\n  useEffect(() => {\n    let osc = audioCtx.createOscillator();\n    osc.connect(masterGainNode);\n    osc.type = waveform;\n    osc.frequency.value = freq;\n    osc.detune.value = detune;\n    osc.start();\n    return () => {\n      osc.stop();\n    };\n  });\n  return <>{freq}</>;\n};\n\n// Setup\n\nconst audioCtx = new AudioContext();\n\nconst masterGainNode = audioCtx.createGain();\nmasterGainNode.connect(audioCtx.destination);\n\n// Types\n\ntype Waveform = \"sine\" | \"square\" | \"triangle\" | \"sawtooth\";\n","import React, { useEffect, useState } from \"react\";\nimport Tones from \"./Tones\";\nimport { compact } from \"lodash\";\n\nconst KeyboardMusic = () => {\n  const [keys, setKeys] = useState<Set<string>>(new Set());\n  useEffect(() => {\n    const addKey = ({ key }: KeyboardEvent) => {\n      if (!keys.has(key)) {\n        setKeys(keys => new Set(keys).add(key));\n      }\n    };\n    const removeKey = ({ key }: KeyboardEvent) => {\n      setKeys(keys => {\n        const nextKeys = new Set(keys);\n        nextKeys.delete(key);\n        return nextKeys;\n      });\n    };\n    window.addEventListener(\"keydown\", addKey);\n    window.addEventListener(\"keyup\", removeKey);\n    return () => {\n      window.removeEventListener(\"keydown\", addKey);\n      window.removeEventListener(\"keyup\", removeKey);\n    };\n  });\n\n  return (\n    <>\n      <div>{keys}</div>\n      <div>\n        <Tones freqs={compact([...keys].map(getFreqFromKey))} />\n      </div>\n    </>\n  );\n};\n\nexport default KeyboardMusic;\n\nconst getFreqFromKey = (key: string) => {\n  return mapKeyToFreq[key] || null;\n};\n\nconst multiplier = 2 ** (1 / 12);\nconst root = 440;\n\nconst fq = (distanceFromRoot: number) => {\n  // Say the key is 3 units away from the root.\n  // We want to multiply the root frequency by the multiplier 3 times.\n  // == (((R * M) * M) * M)\n  // == R * (M * M * M)\n  // == R * (M ** 3)\n  // QUESTION: how does it work for negative distances?\n  return root * multiplier ** distanceFromRoot;\n};\n\nconst piano = {\n  b3: 246.9417,\n  c4: 261.6256,\n  d4: 293.6648,\n  e4: 329.6276,\n  f4: 349.2282,\n  g4: 391.9954,\n  as4: fq(1),\n  a4: fq(0),\n  b4: 493.8833,\n  c5: 523.2511,\n  d5: 587.3295,\n  e5: 659.2551\n};\n\nconst mapKeyToFreq: { [key: string]: number } = {\n  a: piano.c4,\n  s: piano.d4,\n  d: piano.e4,\n  f: piano.f4,\n  g: piano.g4,\n  h: piano.a4,\n  j: piano.b4,\n  k: piano.c5,\n  l: piano.d5,\n  \";\": piano.e5\n};\n","import React from \"react\";\nimport KeyboardMusic from \"./KeyboardMusic\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <KeyboardMusic />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}