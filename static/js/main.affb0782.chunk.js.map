{"version":3,"sources":["components/Tones.tsx","frequencies/piano.ts","components/Keyboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tones","freqs","map","freq","Tone","waveform","detune","useEffect","osc","audioCtx","createOscillator","connect","masterGainNode","type","frequency","value","start","stop","toFixed","AudioContext","createGain","destination","multiplier","fq","distanceFromRoot","octave","note","c","cc","d","dd","e","f","ff","g","gg","a","aa","b","Keyboard","useState","Set","keys","setKeys","addKey","key","has","add","removeKey","nextKeys","delete","window","addEventListener","removeEventListener","compact","getFreqFromKey","mapKeyToFreq","s","h","j","k","l","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAYeA,EAVD,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MACf,OACE,oCACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CAAMA,KAAMA,SAQdC,EAAO,SAAC,GAQP,IAPLD,EAOI,EAPJA,KAOI,IANJE,gBAMI,MANO,OAMP,MALJC,cAKI,MALK,EAKL,EAYJ,OAXAC,qBAAU,WACR,IAAIC,EAAMC,EAASC,mBAMnB,OALAF,EAAIG,QAAQC,GACZJ,EAAIK,KAAOR,EACXG,EAAIM,UAAUC,MAAQZ,EACtBK,EAAIF,OAAOS,MAAQT,EACnBE,EAAIQ,QACG,WACLR,EAAIS,WAGD,6BAAMd,EAAKe,QAAQ,KAKtBT,EAAW,IAAIU,aAEfP,EAAiBH,EAASW,aAChCR,EAAeD,QAAQF,EAASY,a,WC1C1BC,EAAU,SAAG,EAAM,EAAI,IAGhBC,EAAK,SAACC,GAOjB,OATa,IASA,SAAGF,EAAcE,IAGnBrB,EAAO,SAACsB,EAAgBC,GAqHnC,MAlHgB,CACd,CACGC,EAJK,EAKNC,GALM,EAMLC,EANK,EAONC,GAPM,EAQLC,EARK,EASLC,EATK,EAUNC,GAVM,EAWLC,EAXK,EAYNC,GAZM,EAaLC,EAAGb,GAAI,IACRc,GAAId,GAAI,IACPe,EAAGf,GAAI,KAEV,CACGI,EAAGJ,GAAI,IACRK,GAAIL,GAAI,IACPM,EAAGN,GAAI,IACRO,GAAIP,GAAI,IACPQ,EAAGR,GAAI,IACPS,EAAGT,GAAI,IACRU,GAAIV,GAAI,IACPW,EAAGX,GAAI,IACRY,GAAIZ,GAAI,IACPa,EAAGb,GAAI,IACRc,GAAId,GAAI,IACPe,EAAGf,GAAI,KAEV,CACGI,EAAGJ,GAAI,IACRK,GAAIL,GAAI,IACPM,EAAGN,GAAI,IACRO,GAAIP,GAAI,IACPQ,EAAGR,GAAI,IACPS,EAAGT,GAAI,IACRU,GAAIV,GAAI,IACPW,EAAGX,GAAI,IACRY,GAAIZ,GAAI,IACPa,EAAGb,GAAI,IACRc,GAAId,GAAI,IACPe,EAAGf,GAAI,KAEV,CACGI,EAAGJ,GAAI,GACRK,GAAIL,GAAI,GACPM,EAAGN,GAAI,GACRO,GAAIP,GAAI,GACPQ,EAAGR,GAAI,GACPS,EAAGT,GAAI,GACRU,GAAIV,GAAI,GACPW,EAAGX,GAAI,GACRY,GAAIZ,GAAI,GACPa,EAAGb,EAAG,GACPc,GAAId,EAAG,GACNe,EAAGf,EAAG,IAET,CACGI,EAAGJ,EAAG,GACPK,GAAIL,EAAG,GACNM,EAAGN,EAAG,GACPO,GAAIP,EAAG,GACNQ,EAAGR,EAAG,GACNS,EAAGT,EAAG,GACPU,GAAIV,EAAG,GACNW,EAAGX,EAAG,IACPY,GAAIZ,EAAG,IACNa,EAAGb,EAAG,IACPc,GAAId,EAAG,IACNe,EAAGf,EAAG,KAET,CACGI,EAAGJ,EAAG,IACPK,GAAIL,EAAG,IACNM,EAAGN,EAAG,IACPO,GAAIP,EAAG,IACNQ,EAAGR,EAAG,IACNS,EAAGT,EAAG,IACPU,GAAIV,EAAG,IACNW,EAAGX,EAAG,IACPY,GAAIZ,EAAG,IACNa,EAAGb,EAAG,IACPc,GAAId,EAAG,IACNe,EAAGf,EAAG,KAET,CACGI,EAAGJ,EAAG,IACPK,GAAIL,EAAG,IACNM,EAAGN,EAAG,IACPO,GAAIP,EAAG,IACNQ,EAAGR,EAAG,IACNS,EAAGT,EAAG,IACPU,GAAIV,EAAG,IACNW,EAAGX,EAAG,IACPY,GAAIZ,EAAG,IACNa,EAAGb,EAAG,IACPc,GAAId,EAAG,IACNe,EAAGf,EAAG,KAET,CACGI,EAAGJ,EAAG,IACPK,GAvGM,EAwGLC,EAxGK,EAyGNC,GAzGM,EA0GLC,EA1GK,EA2GLC,EA3GK,EA4GNC,GA5GM,EA6GLC,EA7GK,EA8GNC,GA9GM,EA+GLC,EA/GK,EAgHNC,GAhHM,EAiHLC,EAjHK,IAoHKb,GAAQC,IC3FVa,EAlCE,WAAO,IAAD,EACGC,mBAAsB,IAAIC,KAD7B,mBACdC,EADc,KACRC,EADQ,KAuBrB,OArBApC,qBAAU,WACR,IAAMqC,EAAS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,IACXH,EAAKI,IAAID,IACZF,GAAQ,SAAAD,GAAI,OAAI,IAAID,IAAIC,GAAMK,IAAIF,OAGhCG,EAAY,SAAC,GAA4B,IAA1BH,EAAyB,EAAzBA,IACnBF,GAAQ,SAAAD,GACN,IAAMO,EAAW,IAAIR,IAAIC,GAEzB,OADAO,EAASC,OAAOL,GACTI,MAKX,OAFAE,OAAOC,iBAAiB,UAAWR,GACnCO,OAAOC,iBAAiB,QAASJ,GAC1B,WACLG,OAAOE,oBAAoB,UAAWT,GACtCO,OAAOE,oBAAoB,QAASL,OAKtC,oCACE,6BAAMN,GACN,6BACA,6BACE,kBAAC,EAAD,CAAOzC,MAAOqD,kBAAQ,YAAIZ,GAAMxC,IAAIqD,SAQtCA,EAAiB,SAACV,GACtB,OAAOW,EAAaX,IAAQ,MAGxBW,EAA0C,CAC9CpB,EAAGjC,EAAK,EAAG,KACXsD,EAAGtD,EAAK,EAAG,KACX0B,EAAG1B,EAAK,EAAG,KACX6B,EAAG7B,EAAK,EAAG,KACX+B,EAAG/B,EAAK,EAAG,KACXuD,EAAGvD,EAAK,EAAG,KACXwD,EAAGxD,EAAK,EAAG,KACXyD,EAAGzD,EAAK,EAAG,KACX0D,EAAG1D,EAAK,EAAG,KACX,IAAKA,EAAK,EAAG,MC5CA2D,EARH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.affb0782.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nconst Tones = ({ freqs }: { freqs: number[] }) => {\n  return (\n    <>\n      {freqs.map(freq => (\n        <Tone freq={freq} />\n      ))}\n    </>\n  );\n};\n\nexport default Tones;\n\nconst Tone = ({\n  freq,\n  waveform = \"sine\",\n  detune = 0\n}: {\n  freq: number;\n  waveform?: Waveform;\n  detune?: number;\n}) => {\n  useEffect(() => {\n    let osc = audioCtx.createOscillator();\n    osc.connect(masterGainNode);\n    osc.type = waveform;\n    osc.frequency.value = freq;\n    osc.detune.value = detune;\n    osc.start();\n    return () => {\n      osc.stop();\n    };\n  });\n  return <div>{freq.toFixed(2)}</div>;\n};\n\n// Setup\n\nconst audioCtx = new AudioContext();\n\nconst masterGainNode = audioCtx.createGain();\nmasterGainNode.connect(audioCtx.destination);\n\n// Types\n\ntype Waveform = \"sine\" | \"square\" | \"triangle\" | \"sawtooth\";\n","const multiplier = 2 ** (1 / 12);\nconst rootFq = 440;\n\nexport const fq = (distanceFromRoot: number) => {\n  // Say the key is 3 units away from the root.\n  // We want to multiply the root frequency by the multiplier 3 times.\n  // == (((R * M) * M) * M)\n  // == R * (M * M * M)\n  // == R * (M ** 3)\n  // QUESTION: how does it work for negative distances?\n  return rootFq * multiplier ** distanceFromRoot;\n};\n\nexport const freq = (octave: number, note: Note) => {\n  const _ = 0;\n  // prettier-ignore\n  const octaves = [\n    {\n       c: _,\n      cc: _,\n       d: _,\n      dd: _,\n       e: _,\n       f: _,\n      ff: _,\n       g: _,\n      gg: _,\n       a: fq(-36),\n      aa: fq(-35),\n       b: fq(-34)\n    },\n    {\n       c: fq(-33),\n      cc: fq(-32),\n       d: fq(-31),\n      dd: fq(-30),\n       e: fq(-29),\n       f: fq(-28),\n      ff: fq(-27),\n       g: fq(-26),\n      gg: fq(-25),\n       a: fq(-24),\n      aa: fq(-23),\n       b: fq(-22)\n    },\n    {\n       c: fq(-21),\n      cc: fq(-20),\n       d: fq(-19),\n      dd: fq(-18),\n       e: fq(-17),\n       f: fq(-16),\n      ff: fq(-15),\n       g: fq(-14),\n      gg: fq(-13),\n       a: fq(-12),\n      aa: fq(-11),\n       b: fq(-10)\n    },\n    {\n       c: fq(-9),\n      cc: fq(-8),\n       d: fq(-7),\n      dd: fq(-6),\n       e: fq(-5),\n       f: fq(-4),\n      ff: fq(-3),\n       g: fq(-2),\n      gg: fq(-1),\n       a: fq(0),\n      aa: fq(1),\n       b: fq(2)\n    },\n    {\n       c: fq(3),\n      cc: fq(4),\n       d: fq(5),\n      dd: fq(6),\n       e: fq(6),\n       f: fq(8),\n      ff: fq(9),\n       g: fq(10),\n      gg: fq(11),\n       a: fq(12),\n      aa: fq(13),\n       b: fq(14)\n    },\n    {\n       c: fq(15),\n      cc: fq(16),\n       d: fq(17),\n      dd: fq(18),\n       e: fq(19),\n       f: fq(20),\n      ff: fq(21),\n       g: fq(22),\n      gg: fq(23),\n       a: fq(24),\n      aa: fq(25),\n       b: fq(26)\n    },\n    {\n       c: fq(27),\n      cc: fq(28),\n       d: fq(29),\n      dd: fq(30),\n       e: fq(31),\n       f: fq(32),\n      ff: fq(33),\n       g: fq(34),\n      gg: fq(35),\n       a: fq(36),\n      aa: fq(37),\n       b: fq(38)\n    },\n    {\n       c: fq(39),\n      cc: _,\n       d: _,\n      dd: _,\n       e: _,\n       f: _,\n      ff: _,\n       g: _,\n      gg: _,\n       a: _,\n      aa: _,\n       b: _\n    }\n  ];\n  return octaves[octave][note];\n};\n\n// *** TYPES ***\n\nexport type Note =\n  | \"a\" // A\n  | \"b\"\n  | \"c\"\n  | \"d\"\n  | \"e\"\n  | \"f\"\n  | \"g\"\n  | \"aa\" // A Sharp\n  | \"cc\"\n  | \"dd\"\n  | \"ff\"\n  | \"gg\";\n","import React, { useEffect, useState } from \"react\";\nimport Tones from \"./Tones\";\nimport { compact } from \"lodash\";\nimport { freq } from \"frequencies/piano\";\n\nconst Keyboard = () => {\n  const [keys, setKeys] = useState<Set<string>>(new Set());\n  useEffect(() => {\n    const addKey = ({ key }: KeyboardEvent) => {\n      if (!keys.has(key)) {\n        setKeys(keys => new Set(keys).add(key));\n      }\n    };\n    const removeKey = ({ key }: KeyboardEvent) => {\n      setKeys(keys => {\n        const nextKeys = new Set(keys);\n        nextKeys.delete(key);\n        return nextKeys;\n      });\n    };\n    window.addEventListener(\"keydown\", addKey);\n    window.addEventListener(\"keyup\", removeKey);\n    return () => {\n      window.removeEventListener(\"keydown\", addKey);\n      window.removeEventListener(\"keyup\", removeKey);\n    };\n  });\n\n  return (\n    <>\n      <div>{keys}</div>\n      <br />\n      <div>\n        <Tones freqs={compact([...keys].map(getFreqFromKey))} />\n      </div>\n    </>\n  );\n};\n\nexport default Keyboard;\n\nconst getFreqFromKey = (key: string) => {\n  return mapKeyToFreq[key] || null;\n};\n\nconst mapKeyToFreq: { [key: string]: number } = {\n  a: freq(4, \"c\"),\n  s: freq(4, \"d\"),\n  d: freq(4, \"e\"),\n  f: freq(4, \"f\"),\n  g: freq(4, \"g\"),\n  h: freq(4, \"a\"),\n  j: freq(4, \"b\"),\n  k: freq(5, \"c\"),\n  l: freq(5, \"d\"),\n  \";\": freq(5, \"e\")\n};\n","import React from \"react\";\nimport Keyboard from \"./components/Keyboard\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Keyboard />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}